##注：只能管理文本文件，不能管理Word文件、用记事本打开会出错

##配置用户 
##加参数 --global 表示配置全局用户
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

##创建仓库
##通过git init命令把这个目录变成Git可以管理的仓库
$ git init

##添加文件到暂存区
$ git add <FileName>

##提交文件
##参数 -m 表示添加本次提交说明
$ git commit -m "message"

##git状态查看
$ git status

##找不同
$ git diff

##查看版本历史
$ git log
##简化历史信息
$ git log --pretty=oneline

##版本回退
##HEAD^回退到上一个版本，HEAD^^回退到上上个版本或用HEAD~2，回退到前一百个HEAD~100
$ git reser --hard HEAD^ 
##回退到指定版本
$ git reset --hard eaadf4e

##查看命令历史
$ git reflog

##查看工作区和版本库里面最新版本的区别
$ git diff HEAD -- FileName

##撤销修改
##撤销修改的两种情况
##一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的##状态;
##一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后##的状态。
$ git checkout -- FileName

##撤销修改，把暂存区的修改撤销，重新放回工作区
$ git reset HEAD <FileName>

##对撤销的例子
##场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git
checkout -- file。

##场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git
reset HEAD <file>，就回到了场景1，第二步按场景1操作。

##场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

##删除文件
$ git rm FileName
##恢复误删文件(从版本库恢复)
$ git checkout -- FileName

##创建SHH Key
##id_rsa私钥,id_rsa.pub公钥
$ ssh-keygen -t rsa -C "youremail@example.com"

##关联远程仓库
##origin是远程库名字，可以任意改
$ git remote add origin git@github.com:michaelliao/learngit.git

##把本地库推送到远程库
##第一次推送加-u参数，以后的不必加-u
$ git push -u origin master

##从远程库克隆到本地库
$ git clone git@github.com:michaelliao/gitskills.git

##创建分支
##-b参数表示创建并切换
$ git checkout -b dev
##上面命令等价于下面两条命令
##创建分支
$ git branch dev
##切换分支
$ git checkout master

##合并分支
$ git merge dev

##删除分支
$ git branch -d dev
##强行删除分支
$ git branch -D dev

##查看分支图
$ git log --graph
$ git log --graph --pretty=oneline --abbrev-commit

##禁用Fast Forward合并
##禁用Fast Forward合并可以看到分支信息
$ git merge --no-ff -m "message" dev

##隐藏当前工作现场
$ git stash

##查看隐藏的工作现场
$ git stash list

##恢复工作现场的两种方法
##第一种
##stash@{0}为指定的工作现场是数字（0~xxx）
#恢复
$ git stash apply stash@{0}
#删除
$ git stash drop
##第二种
$ git stash pop

##查看远程仓库信息
$ git remote
##详细信息
$ git remote -v

##在本地创建和远程分支对应的分支
$ git checkout -b dev origin/dev

##抓取最新提交
$ git pull
##若有问题
$ git branch --set-upstream-to=origin/dev dev
$ git pull
##建立本地分支和远程分支的关联:git branch --set-upstream branch-name
origin/branch-name

##把分叉提交历史整理成直线
$ git rebase

##给分支贴标签
$ git tag v1.0
##给指定的commit打标签
$ git tag v1.0 f52c633

##查看标签
$ git tag
##查看标签信息
$ git show v1.0
##创建带说明的标签
##-a 表示指定标签名，-m指定说明文字
$ git tag -a v1.0 -m "message" f52c633

##删除标签
$ git tag -d v1.0

##推送标签到远程
$ git push origin v1.0
##推送所有标签
$ git push origin --tags

##删除标签
##先删除本地标签
$ git tag -d v1.0
##再删除远程标签
$ git push origin :refs/tags/v1.0

##删除关联的远程库
$ git remote rm origin

##忽略特殊文件
##新建一个 .gitignore 文件，把需要忽略的文件名写入到 .gitignore 文件中即可

##强制添加被忽略文件到暂存区
$ git add -f FileName

##检查.gitignore
$ git check-ignore -v FileName

##配置别名
将status替换为st
$git config --global alias.st status




##命令总结
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
$ git init
$ git add <FileName>
$ git commit -m "message"
$ git status
$ git diff
$ git log
$ git log --pretty=oneline
$ git reser --hard HEAD^ 
$ git reset --hard eaadf4e
$ git reflog
$ git diff HEAD -- FileName
$ git checkout -- FileName
$ git reset HEAD <FileName>
$ git rm FileName
$ git checkout -- FileName
$ ssh-keygen -t rsa -C "youremail@example.com"
$ git remote add origin git@github.com:michaelliao/learngit.gi
$ git push -u origin master
$ git clone git@github.com:michaelliao/gitskills.git
$ git checkout -b dev
$ git branch dev
$ git checkout master
$ git merge dev
$ git branch -d dev
$ git branch -D dev
$ git log --graph
$ git log --graph --pretty=oneline --abbrev-commit
$ git merge --no-ff -m "message" dev
$ git stash list
$ git stash
$ git stash apply stash@{0}
$ git stash drop
$ git stash pop
$ git remote
$ git remote -v
$ git checkout -b dev origin/dev
$ git pull
$ git branch --set-upstream-to=origin/dev dev
$ git rebase
$ git tag v1.0
$ git tag v1.0 f52c633
$ git tag
$ git show v1.0
$ git tag -a v1.0 -m "message" f52c633
$ git tag -d v1.0
$ git push origin v1.0
$ git push origin --tags
$ git tag -d v1.0
$ git push origin :refs/tags/v1.0
$ git remote rm origin
$ git add -f FileName
$ git check-ignore -v FileName
$git config --global alias.st status




